config:
  # 集群地址列表
  serverA: eureka-server-9001.com #127.0.0.1
  serverB: eureka-server-9002.com #127.0.0.1
  serverC: eureka-server-9003.com #127.0.0.1

  # 集群端口列表
  portA: 9001
  portB: 9002
  portC: 9003

# 服务名称
spring:
  application:
    name: eureka-server
  security:
    user:
      name: hello
      password: world

server:
  # 服务端口
  port: ${config.portC}

# Eureka配置
eureka:

  instance:
    hostname: eureka-server-${server.port}.com
    instance-id: eureka-server-${server.port}
    #prefer-ip-address: true

    #客户端向服务器发送心跳的频率
    lease-renewal-interval-in-seconds: 30

    #服务器在收到最后一次心跳之后等待的持续时间，然后才能从其注册表中删除实例
    lease-expiration-duration-in-seconds: 90

  client:
    #是否将自己作为客户端注册到注册中心(缺省true), 单点设置为false
    #registerWithEureka: false
    #是否从注册中心获取注册信息(缺省true), 单点设置为false
    #fetchRegistry: false
    serviceUrl:
      defaultZone: "http://${spring.security.user.name}:${spring.security.user.password}@${config.serverA}:${config.portA}/eureka/, \
                    http://${spring.security.user.name}:${spring.security.user.password}@${config.serverB}:${config.portB}/eureka/"

  server:
    #是否开启自我保护模式(缺省true), 开发阶段建议设置为false
    enable-self-preservation: true

    #调度程序EvictionTask会比较这两个值并确定系统是否处于自我保存模式。
    #这个调度程序以eviction-interval-timer-in-ms（缺省为60*1000ms）
    #定义的时间频率运行并删除过期的实例，但它会在删除之前检查系统是否已
    #达到自我保护模式（通过比较实际和预期的心跳）。
    eviction-interval-timer-in-ms: 10000

    #用于计算每分钟的预期心跳
    renewal-percent-threshold: 0.85

    #预期心跳调度程序以此频率运行，计算每分钟的预期心跳(缺省为15 * 60 * 1000)
    renewal-threshold-update-interval-ms: 900000

