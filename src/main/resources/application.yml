config:
  # 集群地址列表
  serverA: eureka-server-9001.com #127.0.0.1
  serverB: eureka-server-9002.com #127.0.0.1
  serverC: eureka-server-9003.com #127.0.0.1

  # 集群端口列表
  portA: 9001
  portB: 9002
  portC: 9003

  ssl:
    client:
      key-store: client.p12
      key-store-password: client
    server:
      key-store: classpath:server.p12
      key-alias: server
      key-store-type: PKCS12
      key-store-password: server

---

# 服务名称
spring:
  profiles: http-eurekaserver-A
  application:
    name: eureka-server
  security:
    user:
      name: hello
      password: world

server:
  # 服务端口
  port: ${config.portA}

# Eureka配置
eureka:

  instance:
    hostname: eureka-server-${server.port}.com
    instance-id: eureka-server-${server.port}
    #prefer-ip-address: true

    #客户端向服务器发送心跳的频率
    lease-renewal-interval-in-seconds: 30

    #服务器在收到最后一次心跳之后等待的持续时间，然后才能从其注册表中删除实例
    lease-expiration-duration-in-seconds: 90

    status-page-url: https://${eureka.instance.hostname}:${server.port}/info
    health-check-url: https://${eureka.instance.hostname}:${server.port}/health
    home-page-url: https://${eureka.instance.hostname}:${server.port}/

  client:
    #是否将自己作为客户端注册到注册中心(缺省true), 单点设置为false
    #register-with-eureka: false
    #是否从注册中心获取注册信息(缺省true), 单点设置为false
    #fetch-registry: false
    #从注册中心获取注册信息的间隔时间(缺省30s)
    registry-fetch-interval-seconds: 30

    service-url:
      defaultZone: "http://${spring.security.user.name}:${spring.security.user.password}@${config.serverB}:${config.portB}/eureka/, \
                    http://${spring.security.user.name}:${spring.security.user.password}@${config.serverC}:${config.portC}/eureka/"

  server:
    #是否开启自我保护模式(缺省true), 开发阶段建议设置为false
    #enable-self-preservation: true

    #调度程序EvictionTask会比较这两个值并确定系统是否处于自我保存模式。
    #这个调度程序以eviction-interval-timer-in-ms（缺省为60*1000ms）
    #定义的时间频率运行并删除过期的实例，但它会在删除之前检查系统是否已
    #达到自我保护模式（通过比较实际和预期的心跳）。
    eviction-interval-timer-in-ms: 10000

    #用于计算每分钟的预期心跳
    renewal-percent-threshold: 0.85

    #预期心跳调度程序以此频率运行，计算每分钟的预期心跳(缺省为15 * 60 * 1000)
    renewal-threshold-update-interval-ms: 900000


---

# 服务名称
spring:
  profiles: http-eurekaserver-B
  application:
    name: eureka-server
  security:
    user:
      name: hello
      password: world

server:
  # 服务端口
  port: ${config.portB}

# Eureka配置
eureka:

  instance:
    hostname: eureka-server-${server.port}.com
    instance-id: eureka-server-${server.port}
    #prefer-ip-address: true

    #客户端向服务器发送心跳的频率
    lease-renewal-interval-in-seconds: 30

    #服务器在收到最后一次心跳之后等待的持续时间，然后才能从其注册表中删除实例
    lease-expiration-duration-in-seconds: 90

    status-page-url: https://${eureka.instance.hostname}:${server.port}/info
    health-check-url: https://${eureka.instance.hostname}:${server.port}/health
    home-page-url: https://${eureka.instance.hostname}:${server.port}/

  client:
    #是否将自己作为客户端注册到注册中心(缺省true), 单点设置为false
    #register-with-eureka: false
    #是否从注册中心获取注册信息(缺省true), 单点设置为false
    #fetch-registry: false
    #从注册中心获取注册信息的间隔时间(缺省30s)
    registry-fetch-interval-seconds: 30

    service-url:
      defaultZone: "http://${spring.security.user.name}:${spring.security.user.password}@${config.serverA}:${config.portA}/eureka/, \
                    http://${spring.security.user.name}:${spring.security.user.password}@${config.serverC}:${config.portC}/eureka/"

  server:
    #是否开启自我保护模式(缺省true), 开发阶段建议设置为false
    #enable-self-preservation: true

    #调度程序EvictionTask会比较这两个值并确定系统是否处于自我保存模式。
    #这个调度程序以eviction-interval-timer-in-ms（缺省为60*1000ms）
    #定义的时间频率运行并删除过期的实例，但它会在删除之前检查系统是否已
    #达到自我保护模式（通过比较实际和预期的心跳）。
    eviction-interval-timer-in-ms: 10000

    #用于计算每分钟的预期心跳
    renewal-percent-threshold: 0.85

    #预期心跳调度程序以此频率运行，计算每分钟的预期心跳(缺省为15 * 60 * 1000)
    renewal-threshold-update-interval-ms: 900000


---

# 服务名称
spring:
  profiles: http-eurekaserver-C
  application:
    name: eureka-server
  security:
    user:
      name: hello
      password: world

server:
  # 服务端口
  port: ${config.portC}

# Eureka配置
eureka:

  instance:
    hostname: eureka-server-${server.port}.com
    instance-id: eureka-server-${server.port}
    #prefer-ip-address: true

    #客户端向服务器发送心跳的频率
    lease-renewal-interval-in-seconds: 30

    #服务器在收到最后一次心跳之后等待的持续时间，然后才能从其注册表中删除实例
    lease-expiration-duration-in-seconds: 90

    status-page-url: https://${eureka.instance.hostname}:${server.port}/info
    health-check-url: https://${eureka.instance.hostname}:${server.port}/health
    home-page-url: https://${eureka.instance.hostname}:${server.port}/

  client:
    #是否将自己作为客户端注册到注册中心(缺省true), 单点设置为false
    #register-with-eureka: false
    #是否从注册中心获取注册信息(缺省true), 单点设置为false
    #fetch-registry: false
    #从注册中心获取注册信息的间隔时间(缺省30s)
    registry-fetch-interval-seconds: 30

    service-url:
      defaultZone: "http://${spring.security.user.name}:${spring.security.user.password}@${config.serverA}:${config.portA}/eureka/, \
                    http://${spring.security.user.name}:${spring.security.user.password}@${config.serverB}:${config.portB}/eureka/"

  server:
    #是否开启自我保护模式(缺省true), 开发阶段建议设置为false
    #enable-self-preservation: true

    #调度程序EvictionTask会比较这两个值并确定系统是否处于自我保存模式。
    #这个调度程序以eviction-interval-timer-in-ms（缺省为60*1000ms）
    #定义的时间频率运行并删除过期的实例，但它会在删除之前检查系统是否已
    #达到自我保护模式（通过比较实际和预期的心跳）。
    eviction-interval-timer-in-ms: 10000

    #用于计算每分钟的预期心跳
    renewal-percent-threshold: 0.85

    #预期心跳调度程序以此频率运行，计算每分钟的预期心跳(缺省为15 * 60 * 1000)
    renewal-threshold-update-interval-ms: 900000
    
---

spring:
  profiles: https-eurekaserver-A
  application:
    # 服务名称
    name: eureka-server

  # 开启安全控制
  security:
    user:
      # 用户名
      name: hello
      # 用户密码
      password: world

server:
  # 服务端口
  port: ${config.portA}
  # SSL配置
  ssl:
    # 是否开启SSL认证
    enabled: true
    # 证书存放路径
    key-store: ${config.ssl.server.key-store}
    # 证书别名
    key-alias: ${config.ssl.server.key-alias}
    # 证书存储类型
    key-store-type: ${config.ssl.server.key-store-type}
    # 证书密码
    key-store-password: ${config.ssl.server.key-store-password}

# Eureka配置
eureka:

  instance:
    # 主机名称
    hostname: eureka-server-${server.port}.com

    # 是否微服务调用地址为IP优先(缺省为false)
    prefer-ip-address: false

    # 设置注册中心微服务名(默认为：机器主机名:应用名称:应用端口)
    instance-id: eureka-server-${server.port}

    # Client向Server发送心跳的频率(缺省值30s)
    lease-renewal-interval-in-seconds: 30

    # 服务器在收到最后一次心跳之后等待的持续时间(缺省值90s)，然后才能从其注册表中删除实例
    lease-expiration-duration-in-seconds: 90

    # 安全端口
    secure-port: ${server.port}

    # 是否启用安全端口
    secure-port-enabled: true

    # 是否启用非安全端口
    non-secure-port-enabled: false

  client:
    # 是否将自己作为客户端注册到注册中心(缺省值true)
    register-with-eureka: true

    # 是否从注册中心获取注册信息(缺省值true)
    fetch-registry: true

    # 从注册中心获取注册信息的间隔时间(缺省值30s)
    # 测试环境，可以适当提高Client端拉取Server注册信息的频率
    registry-fetch-interval-seconds: 30

    # 注册地址
    service-url:
      # 默认注册分区地址
      defaultZone: "https://${config.serverB}:${config.portB}/eureka/,\
                    https://${config.serverC}:${config.portC}/eureka/"

  server:
    # 是否开启自我保护模式(缺省值true), 开发阶段建议设置为false
    enable-self-preservation: false

    # 调度程序EvictionTask会比较这两个值并确定系统是否处于自我保存模式。
    # 这个调度程序以eviction-interval-timer-in-ms（缺省值60*1000ms）
    # 定义的时间频率运行并删除过期的实例，但它会在删除之前检查系统是否已
    # 达到自我保护模式（通过比较实际和预期的心跳）。
    eviction-interval-timer-in-ms: 10000

    # 用于计算每分钟的预期心跳（缺省值0.85）
    renewal-percent-threshold: 0.85

    # 预期心跳调度程序以此频率运行，计算每分钟的预期心跳(缺省为15 * 60 * 1000)
    renewal-threshold-update-interval-ms: 900000

    # 同步为空时，等待时间
    wait-time-in-ms-when-sync-empty: 0

    # 设置read Write CacheMap的expire After Write参数，指定写入多长时间后过期
    # 有效防止的问题是：应用实例下线时有告知Eureka server下线，但是由于Eureka server
    # 的REST API有response cache，因此需要等待缓存过期才能更新
    response-cache-auto-expiration-in-seconds: 60

    # 是否开启只读缓存（缺省值true）
    use-read-only-response-cache: true

---

spring:
  profiles: https-eurekaserver-B
  application:
    # 服务名称
    name: eureka-server

  # 开启安全控制
  security:
    user:
      # 用户名
      name: hello
      # 用户密码
      password: world

server:
  # 服务端口
  port: ${config.portB}
  # SSL配置
  ssl:
    # 是否开启SSL认证
    enabled: true
    # 证书存放路径
    key-store: ${config.ssl.server.key-store}
    # 证书别名
    key-alias: ${config.ssl.server.key-alias}
    # 证书存储类型
    key-store-type: ${config.ssl.server.key-store-type}
    # 证书密码
    key-store-password: ${config.ssl.server.key-store-password}

# Eureka配置
eureka:

  instance:
    # 主机名称
    hostname: eureka-server-${server.port}.com

    # 是否微服务调用地址为IP优先(缺省为false)
    prefer-ip-address: false

    # 设置注册中心微服务名(默认为：机器主机名:应用名称:应用端口)
    instance-id: eureka-server-${server.port}

    # Client向Server发送心跳的频率(缺省值30s)
    lease-renewal-interval-in-seconds: 30

    # 服务器在收到最后一次心跳之后等待的持续时间(缺省值90s)，然后才能从其注册表中删除实例
    lease-expiration-duration-in-seconds: 90

    # 安全端口
    secure-port: ${server.port}

    # 是否启用安全端口
    secure-port-enabled: true

    # 是否启用非安全端口
    non-secure-port-enabled: false

  client:
    # 是否将自己作为客户端注册到注册中心(缺省值true)
    register-with-eureka: true

    # 是否从注册中心获取注册信息(缺省值true)
    fetch-registry: true

    # 从注册中心获取注册信息的间隔时间(缺省值30s)
    # 测试环境，可以适当提高Client端拉取Server注册信息的频率
    registry-fetch-interval-seconds: 30

    # 注册地址
    service-url:
      # 默认注册分区地址
      defaultZone: "https://${config.serverA}:${config.portA}/eureka/,\
                    https://${config.serverC}:${config.portC}/eureka/"

  server:
    # 是否开启自我保护模式(缺省值true), 开发阶段建议设置为false
    enable-self-preservation: false

    # 调度程序EvictionTask会比较这两个值并确定系统是否处于自我保存模式。
    # 这个调度程序以eviction-interval-timer-in-ms（缺省值60*1000ms）
    # 定义的时间频率运行并删除过期的实例，但它会在删除之前检查系统是否已
    # 达到自我保护模式（通过比较实际和预期的心跳）。
    eviction-interval-timer-in-ms: 10000

    # 用于计算每分钟的预期心跳（缺省值0.85）
    renewal-percent-threshold: 0.85

    # 预期心跳调度程序以此频率运行，计算每分钟的预期心跳(缺省为15 * 60 * 1000)
    renewal-threshold-update-interval-ms: 900000

    # 同步为空时，等待时间
    wait-time-in-ms-when-sync-empty: 0

    # 设置read Write CacheMap的expire After Write参数，指定写入多长时间后过期
    # 有效防止的问题是：应用实例下线时有告知Eureka server下线，但是由于Eureka server
    # 的REST API有response cache，因此需要等待缓存过期才能更新
    response-cache-auto-expiration-in-seconds: 60

    # 是否开启只读缓存（缺省值true）
    use-read-only-response-cache: true

---

spring:
  profiles: https-eurekaserver-C
  application:
    # 服务名称
    name: eureka-server

  # 开启安全控制
  security:
    user:
      # 用户名
      name: hello
      # 用户密码
      password: world

server:
  # 服务端口
  port: ${config.portC}
  # SSL配置
  ssl:
    # 是否开启SSL认证
    enabled: true
    # 证书存放路径
    key-store: ${config.ssl.server.key-store}
    # 证书别名
    key-alias: ${config.ssl.server.key-alias}
    # 证书存储类型
    key-store-type: ${config.ssl.server.key-store-type}
    # 证书密码
    key-store-password: ${config.ssl.server.key-store-password}

# Eureka配置
eureka:

  instance:
    # 主机名称
    hostname: eureka-server-${server.port}.com

    # 是否微服务调用地址为IP优先(缺省为false)
    prefer-ip-address: false

    # 设置注册中心微服务名(默认为：机器主机名:应用名称:应用端口)
    instance-id: eureka-server-${server.port}

    # Client向Server发送心跳的频率(缺省值30s)
    lease-renewal-interval-in-seconds: 30

    # 服务器在收到最后一次心跳之后等待的持续时间(缺省值90s)，然后才能从其注册表中删除实例
    lease-expiration-duration-in-seconds: 90

    # 安全端口
    secure-port: ${server.port}

    # 是否启用安全端口
    secure-port-enabled: true

    # 是否启用非安全端口
    non-secure-port-enabled: false

  client:
    # 是否将自己作为客户端注册到注册中心(缺省值true)
    register-with-eureka: true

    # 是否从注册中心获取注册信息(缺省值true)
    fetch-registry: true

    # 从注册中心获取注册信息的间隔时间(缺省值30s)
    # 测试环境，可以适当提高Client端拉取Server注册信息的频率
    registry-fetch-interval-seconds: 30

    # 注册地址
    service-url:
      # 默认注册分区地址
      defaultZone: "https://${config.serverA}:${config.portA}/eureka/,\
                    https://${config.serverB}:${config.portB}/eureka/"

  server:
    # 是否开启自我保护模式(缺省值true), 开发阶段建议设置为false
    enable-self-preservation: false

    # 调度程序EvictionTask会比较这两个值并确定系统是否处于自我保存模式。
    # 这个调度程序以eviction-interval-timer-in-ms（缺省值60*1000ms）
    # 定义的时间频率运行并删除过期的实例，但它会在删除之前检查系统是否已
    # 达到自我保护模式（通过比较实际和预期的心跳）。
    eviction-interval-timer-in-ms: 10000

    # 用于计算每分钟的预期心跳（缺省值0.85）
    renewal-percent-threshold: 0.85

    # 预期心跳调度程序以此频率运行，计算每分钟的预期心跳(缺省为15 * 60 * 1000)
    renewal-threshold-update-interval-ms: 900000

    # 同步为空时，等待时间
    wait-time-in-ms-when-sync-empty: 0

    # 设置read Write CacheMap的expire After Write参数，指定写入多长时间后过期
    # 有效防止的问题是：应用实例下线时有告知Eureka server下线，但是由于Eureka server
    # 的REST API有response cache，因此需要等待缓存过期才能更新
    response-cache-auto-expiration-in-seconds: 60

    # 是否开启只读缓存（缺省值true）
    use-read-only-response-cache: true
