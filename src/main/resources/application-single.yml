spring:
  application:
    # 服务名称
    name: eureka-server

  # 开启安全控制
  security:
    user:
      # 用户名
      name: hello
      # 用户密码
      password: world

server:
  # 服务端口
  port: 9000

# Eureka配置
eureka:

  instance:
    hostname: eureka-server-${server.port}.com

    # 是否微服务调用地址为IP优先(缺省值false)
    prefer-ip-address: false

    # 设置注册中心微服务名，默认值：机器主机名:应用名称:应用端口
    instance-id: eureka-server-${server.port}

    # 客户端向服务器发送心跳的频率(缺省值30s)
    lease-renewal-interval-in-seconds: 30

    # 服务器在收到最后一次心跳之后等待的持续时间(缺省值90s)，然后才能从其注册表中删除实例
    lease-expiration-duration-in-seconds: 90

  client:
    # 是否将自己作为客户端注册到注册中心(缺省值true), 单点设置为false
    register-with-eureka: false

    # 是否从注册中心获取注册信息(缺省值true), 单点设置为false
    fetch-registry: false

    # 从注册中心获取注册信息的间隔时间(缺省值30s),
    # 测试环境，可以适当提高Client端拉取Server注册信息的频率
    registry-fetch-interval-seconds: 30

    # 注册地址
    #service-url:
      # 默认注册分区地址
      # defaultZone: http://localhost:${server.port}/eureka/

  server:
    # 是否开启自我保护模式(缺省值true), 开发阶段建议设置为false
    enable-self-preservation: true

    # 调度程序EvictionTask会比较这两个值并确定系统是否处于自我保存模式。
    # 这个调度程序以eviction-interval-timer-in-ms(缺省值60*1000ms)
    # 定义的时间频率运行并删除过期的实例，但它会在删除之前检查系统是否已
    # 达到自我保护模式（通过比较实际和预期的心跳数）。
    eviction-interval-timer-in-ms: 10000

    # 用于计算每分钟的预期心跳(缺省值0.85)
    renewal-percent-threshold: 0.85

